{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
        "FdcInflationConfiguration": {
            "additionalProperties": false,
            "properties": {
                "attestationType": {
                    "description": "The attestation type.",
                    "type": "string"
                },
                "inflationShare": {
                    "description": "Inflation share/weight for this configuration.",
                    "type": "integer"
                },
                "minRequestsThreshold": {
                    "description": "Minimal reward eligibility threshold in number of request.",
                    "type": "integer"
                },
                "mode": {
                    "description": "Mode (additional settings interpreted on the client side off-chain).",
                    "type": "integer"
                },
                "source": {
                    "description": "The source.",
                    "type": "string"
                }
            },
            "required": [
                "attestationType",
                "inflationShare",
                "minRequestsThreshold",
                "mode",
                "source"
            ],
            "type": "object"
        },
        "FdcRequestFee": {
            "additionalProperties": false,
            "properties": {
                "attestationType": {
                    "description": "The attestation type.",
                    "type": "string"
                },
                "feeWei": {
                    "description": "The fee per request. In Wei.",
                    "type": "string"
                },
                "source": {
                    "description": "The source.",
                    "type": "string"
                }
            },
            "required": [
                "attestationType",
                "feeWei",
                "source"
            ],
            "type": "object"
        },
        "FeedConfiguration": {
            "additionalProperties": false,
            "properties": {
                "feedId": {
                    "$ref": "#/definitions/FeedId",
                    "description": "The feed id."
                },
                "inflationShare": {
                    "description": "The inflation share/weight.",
                    "type": "integer"
                },
                "rewardBandValue": {
                    "description": "The reward band value (interpreted off-chain) in relation to the median.",
                    "type": "integer"
                }
            },
            "required": [
                "feedId",
                "inflationShare",
                "rewardBandValue"
            ],
            "type": "object"
        },
        "FeedDecimals": {
            "additionalProperties": false,
            "properties": {
                "decimals": {
                    "description": "The feed decimals.",
                    "type": "integer"
                },
                "feedId": {
                    "$ref": "#/definitions/FeedId",
                    "description": "The feed id."
                }
            },
            "required": [
                "decimals",
                "feedId"
            ],
            "type": "object"
        },
        "FeedId": {
            "additionalProperties": false,
            "properties": {
                "category": {
                    "description": "The feed category (super category and type).\nsuper category: 0 (0x00) - 31 (0x1f) normal, 32 (0x20) - 63 (0x3f) custom, ...\ntype: 0 - none, 1 - crypto, 2 - FX, 3 - commodity, 4 - stock,...\ne.g. 1 (0x01) - normal crypto, 33 (0x21) - custom crypto,...",
                    "type": "integer"
                },
                "name": {
                    "description": "The feed name.",
                    "type": "string"
                }
            },
            "required": [
                "category",
                "name"
            ],
            "type": "object"
        },
        "FlareDaemonizedContract": {
            "additionalProperties": false,
            "properties": {
                "contractName": {
                    "description": "The daemonized contract name.",
                    "type": "string"
                },
                "gasLimit": {
                    "description": "The daemonized contract gas limit.",
                    "type": "integer"
                },
                "oldContract": {
                    "description": "Indicates whether the contract is part of old repo (flare-smart-contracts).",
                    "type": "boolean"
                }
            },
            "required": [
                "contractName",
                "gasLimit",
                "oldContract"
            ],
            "type": "object"
        },
        "FtsoInflationConfiguration": {
            "additionalProperties": false,
            "properties": {
                "feedIds": {
                    "description": "List of feed ids for this configuration.",
                    "items": {
                        "$ref": "#/definitions/FeedId"
                    },
                    "type": "array"
                },
                "inflationShare": {
                    "description": "Inflation share/weight for this configuration.",
                    "type": "integer"
                },
                "minRewardedTurnoutBIPS": {
                    "description": "Minimal reward eligibility turnout threshold in BIPS (e.g. 30%).",
                    "type": "integer"
                },
                "mode": {
                    "description": "Rewards split mode (0 means equally, 1 means random,...).",
                    "type": "integer"
                },
                "primaryBandRewardSharePPM": {
                    "description": "Primary band reward share in PPM (e.g 60%).",
                    "type": "integer"
                },
                "secondaryBandWidthPPMs": {
                    "description": "Secondary band width in PPM (parts per million) in relation to the median (e.g. 1%).",
                    "items": {
                        "type": "number"
                    },
                    "type": "array"
                }
            },
            "required": [
                "feedIds",
                "inflationShare",
                "minRewardedTurnoutBIPS",
                "mode",
                "primaryBandRewardSharePPM",
                "secondaryBandWidthPPMs"
            ],
            "type": "object"
        },
        "FtsoProxy": {
            "additionalProperties": false,
            "properties": {
                "feedId": {
                    "$ref": "#/definitions/FeedId",
                    "description": "The ftso feed id."
                },
                "symbol": {
                    "description": "The FTSO symbol.",
                    "type": "string"
                }
            },
            "required": [
                "feedId",
                "symbol"
            ],
            "type": "object"
        },
        "InflationReceiver": {
            "additionalProperties": false,
            "properties": {
                "contractName": {
                    "description": "The inflation receiver contract name.",
                    "type": "string"
                },
                "oldContract": {
                    "description": "Indicates whether the contract is part of old repo (flare-smart-contracts).",
                    "type": "boolean"
                },
                "sharingBIPS": {
                    "description": "The inflation sharing BIPS.",
                    "type": "integer"
                },
                "topUpFactorx100": {
                    "description": "The inflation top up factorx100.",
                    "type": "integer"
                },
                "topUpType": {
                    "description": "The inflation top up type.",
                    "type": "integer"
                }
            },
            "required": [
                "contractName",
                "oldContract",
                "sharingBIPS",
                "topUpFactorx100",
                "topUpType"
            ],
            "type": "object"
        },
        "InitialVoterData": {
            "additionalProperties": false,
            "properties": {
                "delegationAddress": {
                    "description": "The delegation address (ftso v1 address).",
                    "type": "string"
                },
                "nodeIds": {
                    "description": "The node ids to be associated with the voter.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "voter": {
                    "description": "The voter address (cold wallet).",
                    "type": "string"
                }
            },
            "required": [
                "delegationAddress",
                "nodeIds",
                "voter"
            ],
            "type": "object"
        }
    },
    "properties": {
        "$schema": {
            "type": "string"
        },
        "addAfterNotChilledEpochs": {
            "description": "Number of last consecutive epochs in which data provider should not be chilled in order to be accepted to the management group.",
            "type": "integer"
        },
        "addAfterRewardedEpochs": {
            "description": "Number of last epochs with initialised rewards in which data provider needs to earn rewards in order to be accepted to the management group.",
            "type": "integer"
        },
        "baseRange": {
            "description": "The base range.",
            "type": "string"
        },
        "baseSampleSize": {
            "description": "The base sample size.",
            "type": "string"
        },
        "decimalsUpdateOffset": {
            "description": "Feed decimals update timelock measured in reward epochs (must be more than 1, e.g. 3).",
            "type": "integer"
        },
        "defaultDecimals": {
            "description": "Default feed decimals (e.g. 5).",
            "type": "integer"
        },
        "defaultFeePercentageBIPS": {
            "description": "Default fee percentage, in BIPS (e.g. 20%).",
            "type": "integer"
        },
        "defaultFeeWei": {
            "description": "The default fee for fetching fast update feeds. In Wei.",
            "type": "string"
        },
        "deployerPrivateKey": {
            "description": "Deployer private key. Overriden if provided in `.env` file as `DEPLOYER_PRIVATE_KEY`",
            "type": "string"
        },
        "fdcInflationConfigurations": {
            "description": "The inflation configurations for the FDC protocol.",
            "items": {
                "$ref": "#/definitions/FdcInflationConfiguration"
            },
            "type": "array"
        },
        "fdcProtocolId": {
            "description": "The FDC protocol id.",
            "type": "integer"
        },
        "fdcRequestFees": {
            "description": "The supported requests fee configurations.",
            "items": {
                "$ref": "#/definitions/FdcRequestFee"
            },
            "type": "array"
        },
        "fdcRequestsOffsetSeconds": {
            "description": "The requests offset (in seconds).",
            "type": "integer"
        },
        "feePercentageUpdateOffset": {
            "description": "Fee percentage update timelock measured in reward epochs (must be more than 1, e.g. 3).",
            "type": "integer"
        },
        "feedConfigurations": {
            "description": "The feed configurations.",
            "items": {
                "$ref": "#/definitions/FeedConfiguration"
            },
            "type": "array"
        },
        "feedDecimalsList": {
            "description": "The feed decimals used in the FTSO system.",
            "items": {
                "$ref": "#/definitions/FeedDecimals"
            },
            "type": "array"
        },
        "feedsHistorySize": {
            "description": "Feed history size (e.g. 200).",
            "type": "integer"
        },
        "firstRewardEpochStartVotingRoundId": {
            "description": "The start voting round id of the first reward epoch.",
            "type": "integer"
        },
        "firstVotingRoundStartTs": {
            "description": "Timestamp of the first voting round start (in seconds since Unix epoch).",
            "type": "integer"
        },
        "flareDaemonizedContracts": {
            "description": "Flare daemonized contracts. Order matters. Inflation should be first.",
            "items": {
                "$ref": "#/definitions/FlareDaemonizedContract"
            },
            "type": "array"
        },
        "ftsoInflationConfigurations": {
            "description": "The inflation configurations for the FTSO protocol.",
            "items": {
                "$ref": "#/definitions/FtsoInflationConfiguration"
            },
            "type": "array"
        },
        "ftsoProtocolId": {
            "description": "The FTSO protocol id - used for random number generation.",
            "type": "integer"
        },
        "ftsoProxies": {
            "description": "The list of old FTSOs.",
            "items": {
                "$ref": "#/definitions/FtsoProxy"
            },
            "type": "array"
        },
        "genesisGovernancePrivateKey": {
            "description": "Genesis governance private key (the key used as governance during deploy).\nOverriden if set in `.env` file as `GENESIS_GOVERNANCE_PRIVATE_KEY`.",
            "type": "string"
        },
        "governanceExecutorPublicKey": {
            "description": "The public key of the executor (the account that is allowed to execute governance operations once the timelock expires).\nOverriden if provided in `.env` file as `GOVERNANCE_EXECUTOR_PUBLIC_KEY`.",
            "type": "string"
        },
        "governancePrivateKey": {
            "description": "Governance private key (the private part of `governancePublicKey`).\nOverriden if provided in `.env` file as `GOVERNANCE_PRIVATE_KEY`.\nNote: this is only used in test deploys. In production, governance is a multisig address and there is no private key.",
            "type": "string"
        },
        "governancePublicKey": {
            "description": "Governance public key (the key to which governance is transferred after deploy).\nOverriden if provided in `.env` file as `GOVERNANCE_PUBLIC_KEY`.",
            "type": "string"
        },
        "governanceTimelock": {
            "description": "The timelock in seconds to use for all governance operations (the time that has to pass before any governance operation is executed).\nIt safeguards the system against bad governance decisions or hijacked governance.",
            "type": "integer"
        },
        "incentiveOfferDurationBlocks": {
            "description": "The incentive offer duration in blocks.",
            "type": "integer"
        },
        "inflationReceivers": {
            "description": "The inflation receivers.",
            "items": {
                "$ref": "#/definitions/InflationReceiver"
            },
            "type": "array"
        },
        "initialNormalisedWeights": {
            "description": "Normalised weights (sum < 2^16) of the voters used in the initial reward epoch id.",
            "items": {
                "type": "number"
            },
            "type": "array"
        },
        "initialRandomVotePowerBlockSelectionSize": {
            "description": "The initial random vote power block selection size in blocks (e.g. 1000).",
            "type": "integer"
        },
        "initialRewardEpochOffset": {
            "description": "The initial offset in reward epochs.",
            "type": "integer"
        },
        "initialThreshold": {
            "description": "Threshold used in the initial reward epoch id - should be less then the sum of the normalised weights.",
            "type": "integer"
        },
        "initialVoterData": {
            "description": "The initial voter data to be set in entity manager.",
            "items": {
                "$ref": "#/definitions/InitialVoterData"
            },
            "type": "array"
        },
        "initialVoters": {
            "description": "Voters used in the initial reward epoch id.",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "maintainer": {
            "description": "Address of maintainer of PollingManagementGroup contract.",
            "type": "string"
        },
        "majorityConditionBIPS": {
            "description": "Majority condition (in BIPS) for proposal to be accepted. If less than majorityConditionBIPS votes in favor, proposal can't be accepted.",
            "type": "integer"
        },
        "maxNodeIdsPerEntity": {
            "description": "Max number of nodes per entity (e.g. 4).",
            "type": "integer"
        },
        "maxVotersPerRewardEpoch": {
            "description": "Max number of voters per reward epoch (e.g. 100).",
            "type": "integer"
        },
        "messageFinalizationWindowInRewardEpochs": {
            "description": "If reward epoch of a message is less then `lastInitializedRewardEpoch - messageFinalizationWindowInRewardEpochs`\nthe relaying of a message is not allowed.",
            "type": "integer"
        },
        "minimalRewardsOfferValueNAT": {
            "description": "The minimal reward offer value in NAT (e.g. 1,000,000).",
            "type": "integer"
        },
        "newSigningPolicyInitializationStartSeconds": {
            "description": "The time in seconds before the end of the reward epoch when the new signing policy initialization starts (e.g. 2 hours).",
            "type": "integer"
        },
        "newSigningPolicyMinNumberOfVotingRoundsDelay": {
            "description": "The minimal number of voting rounds delay for switching to the new signing policy (e.g. 3).",
            "type": "integer"
        },
        "pChainStakeEnabled": {
            "description": "Indicates whether the P-chain stake is enabled.",
            "type": "boolean"
        },
        "pChainStakeMirrorMaxAmountNAT": {
            "description": "Max amount of P-chain stake. In whole native units, not Wei. Recommended value 200.000.000.",
            "type": "integer"
        },
        "pChainStakeMirrorMaxDurationDays": {
            "description": "Max duration of P-chain stake in days, recommended value 365 days",
            "type": "integer"
        },
        "pChainStakeMirrorMinAmountNAT": {
            "description": "Min amount of P-chain stake. In whole native units, not Wei. Recommended value 50.000.",
            "type": "integer"
        },
        "pChainStakeMirrorMinDurationDays": {
            "description": "Min duration of P-chain stake in days, recommended value 14 days",
            "type": "integer"
        },
        "proposalFeeValueNAT": {
            "description": "Cost of creating proposal (in NAT). It is paid by the proposer.",
            "type": "integer"
        },
        "proposers": {
            "description": "Array of proposers that can create a proposal",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "rNatFirstMonthStartTs": {
            "description": "The RNat first month start timestamp.",
            "type": "integer"
        },
        "rNatFundedByIncentivePool": {
            "description": "Indicates if RNat is funded by incentive pool.",
            "type": "boolean"
        },
        "rNatFundingAddress": {
            "description": "The RNat funding address.",
            "type": "string"
        },
        "rNatManager": {
            "description": "The RNat manager address.",
            "type": "string"
        },
        "rNatName": {
            "description": "The RNat token name.",
            "type": "string"
        },
        "rNatSymbol": {
            "description": "The RNat token symbol.",
            "type": "string"
        },
        "randomAcquisitionMaxDurationBlocks": {
            "description": "The maximal random acquisition duration in blocks (e.g. 15000 blocks).",
            "type": "integer"
        },
        "randomAcquisitionMaxDurationSeconds": {
            "description": "The maximal random acquisition duration in seconds (e.g. 8 hour).",
            "type": "integer"
        },
        "rangeIncreaseLimit": {
            "description": "The range increase limit.",
            "type": "string"
        },
        "rangeIncreasePriceNAT": {
            "description": "The range increase price. In whole native units, not Wei.",
            "type": "integer"
        },
        "relayThresholdIncreaseBIPS": {
            "description": "The increase of the threshold in BIPS for relaying the merkle root with the old signing policy (must be more than 100%).",
            "type": "integer"
        },
        "removeAfterEligibleProposals": {
            "description": "Number of last relevant proposals to check for not voting. Proposal is relevant if quorum was achieved and voting has ended.",
            "type": "integer"
        },
        "removeAfterNonParticipatingProposals": {
            "description": "In how many of removeAfterEligibleProposals proposals should data provider not participate (vote) in order to be eligible for removal from the management group.",
            "type": "integer"
        },
        "removeAfterNotRewardedEpochs": {
            "description": "Number of last epochs with initialised rewards in which data provider should not earn rewards in order to be eligible for removal from the management group.",
            "type": "integer"
        },
        "removeForDays": {
            "description": "Number of days for which member is removed from the management group.",
            "type": "integer"
        },
        "rewardEpochDurationInVotingEpochs": {
            "description": "The duration of a reward epoch in voting epochs.",
            "type": "integer"
        },
        "rewardExpiryOffsetSeconds": {
            "description": "The reward expiry offset in seconds (e.g. 90 days).",
            "type": "integer"
        },
        "rewardManagerId": {
            "description": "The reward manager id is used to identify the reward manager contract in the Flare Systems Manager contract (e.g. chain id).",
            "type": "integer"
        },
        "sampleIncreaseLimit": {
            "description": "The sample increase limit.",
            "type": "string"
        },
        "sampleSizeIncreasePriceWei": {
            "description": "The sample size increase price. In Wei.",
            "type": "integer"
        },
        "signingPolicyMinNumberOfVoters": {
            "description": "The minimal number of voters for the signing policy (e.g. 10).",
            "type": "integer"
        },
        "signingPolicySignNoRewardsDurationBlocks": {
            "description": "Number of blocks for new signing policy sign phase (in addition to non-punishable blocks) after which all rewards are burned (e.g. 600 blocks).",
            "type": "integer"
        },
        "signingPolicySignNonPunishableDurationBlocks": {
            "description": "The non-punishable new signing policy sign phase duration in blocks (e.g. 600 blocks).",
            "type": "integer"
        },
        "signingPolicySignNonPunishableDurationSeconds": {
            "description": "The non-punishable new signing policy sign phase duration in seconds (e.g. 20 minutes).",
            "type": "integer"
        },
        "signingPolicyThresholdPPM": {
            "description": "The threshold for the signing policy in PPM (must be less then 100%, e.g. 50%).",
            "type": "integer"
        },
        "submissionDeployerPrivateKey": {
            "description": "Submission deployer private key. Overriden if provided in `.env` file as `SUBMISSION_DEPLOYER_PRIVATE_KEY`",
            "type": "string"
        },
        "submissionWindowBlocks": {
            "description": "The submission window in blocks.",
            "type": "integer"
        },
        "submitUptimeVoteMinDurationBlocks": {
            "description": "The minimal duration of uptime vote submission phase in blocks (e.g. 300 blocks).",
            "type": "integer"
        },
        "submitUptimeVoteMinDurationSeconds": {
            "description": "The minimal duration of uptime vote submission phase in seconds (e.g. 10 minutes).",
            "type": "integer"
        },
        "testDeployment": {
            "description": "Indicates whether this is a test deployment (local, scdev, etc.)",
            "type": "boolean"
        },
        "thresholdConditionBIPS": {
            "description": "Threshold (in BIPS) for proposal to potentially be accepted. If less than thresholdConditionBIPS of total vote power participates in vote, proposal can't be accepted.",
            "type": "integer"
        },
        "voterRegistrationMinDurationBlocks": {
            "description": "The minimal duration of voter registration phase in blocks (e.g. 900 blocks).",
            "type": "integer"
        },
        "voterRegistrationMinDurationSeconds": {
            "description": "The minimal duration of voter registration phase in seconds (e.g. 30 minutes).",
            "type": "integer"
        },
        "votingDelaySeconds": {
            "description": "Period (in seconds) between creation of proposal and voting start time.",
            "type": "integer"
        },
        "votingEpochDurationSeconds": {
            "description": "The duration of a voting epoch in seconds.",
            "type": "integer"
        },
        "votingPeriodSeconds": {
            "description": "Length (in seconds) of voting period.",
            "type": "integer"
        },
        "wNatCapPPM": {
            "description": "The WNat cap used in signing policy weight, in PPM (e.g. 2.5%).",
            "type": "integer"
        }
    },
    "required": [
        "addAfterNotChilledEpochs",
        "addAfterRewardedEpochs",
        "baseRange",
        "baseSampleSize",
        "decimalsUpdateOffset",
        "defaultDecimals",
        "defaultFeePercentageBIPS",
        "defaultFeeWei",
        "deployerPrivateKey",
        "fdcInflationConfigurations",
        "fdcProtocolId",
        "fdcRequestFees",
        "fdcRequestsOffsetSeconds",
        "feePercentageUpdateOffset",
        "feedConfigurations",
        "feedDecimalsList",
        "feedsHistorySize",
        "firstRewardEpochStartVotingRoundId",
        "firstVotingRoundStartTs",
        "flareDaemonizedContracts",
        "ftsoInflationConfigurations",
        "ftsoProtocolId",
        "ftsoProxies",
        "genesisGovernancePrivateKey",
        "governanceExecutorPublicKey",
        "governancePrivateKey",
        "governancePublicKey",
        "governanceTimelock",
        "incentiveOfferDurationBlocks",
        "inflationReceivers",
        "initialNormalisedWeights",
        "initialRandomVotePowerBlockSelectionSize",
        "initialRewardEpochOffset",
        "initialThreshold",
        "initialVoterData",
        "initialVoters",
        "maintainer",
        "majorityConditionBIPS",
        "maxNodeIdsPerEntity",
        "maxVotersPerRewardEpoch",
        "messageFinalizationWindowInRewardEpochs",
        "minimalRewardsOfferValueNAT",
        "newSigningPolicyInitializationStartSeconds",
        "newSigningPolicyMinNumberOfVotingRoundsDelay",
        "pChainStakeEnabled",
        "pChainStakeMirrorMaxAmountNAT",
        "pChainStakeMirrorMaxDurationDays",
        "pChainStakeMirrorMinAmountNAT",
        "pChainStakeMirrorMinDurationDays",
        "proposalFeeValueNAT",
        "proposers",
        "rNatFirstMonthStartTs",
        "rNatFundedByIncentivePool",
        "rNatFundingAddress",
        "rNatManager",
        "rNatName",
        "rNatSymbol",
        "randomAcquisitionMaxDurationBlocks",
        "randomAcquisitionMaxDurationSeconds",
        "rangeIncreaseLimit",
        "rangeIncreasePriceNAT",
        "relayThresholdIncreaseBIPS",
        "removeAfterEligibleProposals",
        "removeAfterNonParticipatingProposals",
        "removeAfterNotRewardedEpochs",
        "removeForDays",
        "rewardEpochDurationInVotingEpochs",
        "rewardExpiryOffsetSeconds",
        "rewardManagerId",
        "sampleIncreaseLimit",
        "sampleSizeIncreasePriceWei",
        "signingPolicyMinNumberOfVoters",
        "signingPolicySignNoRewardsDurationBlocks",
        "signingPolicySignNonPunishableDurationBlocks",
        "signingPolicySignNonPunishableDurationSeconds",
        "signingPolicyThresholdPPM",
        "submissionDeployerPrivateKey",
        "submissionWindowBlocks",
        "submitUptimeVoteMinDurationBlocks",
        "submitUptimeVoteMinDurationSeconds",
        "testDeployment",
        "thresholdConditionBIPS",
        "voterRegistrationMinDurationBlocks",
        "voterRegistrationMinDurationSeconds",
        "votingDelaySeconds",
        "votingEpochDurationSeconds",
        "votingPeriodSeconds",
        "wNatCapPPM"
    ],
    "type": "object"
}

